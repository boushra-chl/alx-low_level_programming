!<arch>
0-isupper.c/    0           0     0     644     257       `
/**
 * _isupper - function that checks if a character is uppercase
 * @c: the checked character
 * Return: 1 if c is uppercase and 0 if not
 */
#include "main.h"
int _isupper(int c)
{
	if (c <= 90 && c >= 65)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-strcat.c/     0           0     0     644     614       `
/**
 * _strcat - function appends the src string to the dest string,
 * overwriting the terminating null byte (\0) at the end of dest,
 * and then adds a terminating null byte
 * @src: string to be concatenated
 * @dest: string to be concatenated into
 * Return: pointer to dest
 */
#include "main.h"
char *_strcat(char *dest, char *src)
{
	int i = 0, j, len1 = 0, len2 = 0;

	while (src[i] != '\0')
	{
		i++;
	}

	len1 = i;
	i = 0;

	while (dest[i] != '\0')
	{
		i++;
	}

	len2 = i;
	i = 0;
	j = len2;

	while (src[i] != '\0')
	{
		dest[j] = src[i];
		i++;
		j++;
	}
	dest[len2 + len1] = '\0';

	return (dest);
}
1-isdigit.c/    0           0     0     644     237       `
/**
 * _isdigit - function that checks if a character is a digit
 * @c: the checked character
 * Return: 1 if digit and 0 otherwise.
 */
#include "main.h"
	int _isdigit(int c)
{
	if (c <= 57 && c >= 48)
	return (1);
	else
	return (0);
}

1-strncat.c/    0           0     0     644     488       `
/**
 * _strncat -  function that concatenates two strings
 * respecting number of bytes
 * @dest: string to be concatenated into
 * @src: string to be concatenated
 * @n: number of bytes to be printed
 * Return: pointer to dest
 */
#include "main.h"
char *_strncat(char *dest, char *src, int n)
{
	int i = 0, len2 = 0, j;

	while (dest[i] != '\0')
	{
		i++;
	}
	len2 = i;
	j = len2;
	i = 0;
		while (src[i] != '\0' && i < n)
		{
			dest[j] = src[i];
			j++;
			i++;
		}
	return (dest);
}
2-strlen.c/     0           0     0     644     246       `
/**
 * _strlen -  function that returns the length of a string
 * @s: string to be checked
 * Return: integer, the lengh of the string
 */
#include "main.h"
int _strlen(char *s)
{
	int i = 0;

	while (*s != '\0')
	{
	i++;
	s++;
	}
	return (i);
}
3-islower.c/    0           0     0     644     256       `
#include "main.h"
/**
 * _islower - function that checks for lowercase character
 * @c: The character to be checked
 * Return: 1 if lowercase and 0 if not
 */
	int _islower(int c)
{
	if (c >= 98 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-strcmp.c/     0           0     0     644     569       `
/**
 * _strcmp - function that compares two strings and returns the result
 * @s1: string to be compared to
 * @s2: string to be compared
 * Return: integer, result of comparison
 */
#include "main.h"
int _strcmp(char *s1, char *s2)
{
	int i = 0, len1 = 0, len2 = 0, len = 0, n = 0;

	while (s1[i] != '\0')
	{
		i++;
	}
	len1 = i;

	i = 0;
	while (s2[i] != '\0')
	{
		i++;
	}
	len2 = i;

	if (len1 <= len2)
		len = len2;
	else
		len = len1;
	for (i = 0 ; i < len ; i++)
	{
		if (s1[i] < s2[i] || s1[i] > s2[i])
		{
			n = s1[i] - s2[i];
			break;
		}
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     308       `
#include "main.h"
/**
 * _isalpha - function that checks for alpha character
 * @c: The character to be checked
 * Return: 1 if alpha character and 0 if not
 */
	int _isalpha(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
5-strstr.c/     0           0     0     644     473       `
/**
 * _strstr - locates a substring
 * @haystack: string that we are looking in
 * @needle: string to be looked for
 * Return: pointer to haystack
 */
#include "main.h"
char *_strstr(char *haystack, char *needle)
{
int i = 0;

	if (*needle == 0)
	return (haystack);

	while (*haystack)
	{
		if (haystack[i] == needle[i])
		{
			do {
				if (needle[i + 1] == '\0')
				return (haystack);
				i++;
			} while (needle[i] == haystack[i]);
		}
	haystack++;
	}
return ('\0');
}

9-strcpy.c/     0           0     0     644     623       `
/**
 * _strcpy -  function that copies the string
 * pointed to by src, including the terminating null byte (\0),
 * to the buffer pointed to by dest
 * @src: string to be copied
 * @dest: buffer to be copied into
 * Return: pointer to dest
 */
#include "main.h"

char *_strcpy(char *dest, char *src)
{
	int i = 0, len1 = 0, len2 = 0;

	while (src[i] != '\0')
	{
		i++;
	}
	len2 = i;
	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	len1 = i;

	if (len1 < len2)
	{
		for (i = 0 ; i < len2 ; i++)
			dest[i] = src[i];
	}
	else
	{
			for (i = 0 ; i < len2 ; i++)
				dest[i] = src[i];
	}
	dest[len2] = '\0';
	return (dest);
}


_putchar.c/     0           0     0     644     241       `
#include <unistd.h>
/**
* _putchar - writes the character c to stdout
* @c: The character to print
*
* Return: On success 1.
* On error, -1 is returned, and errno is set appropriately.
*/
int _putchar(char c)
{
	return (write(1, &c, 1));
}


0-memset.c/     0           0     0     644     375       `
/**
 * _memset - function that fills the first n bytes of memory area
 * pointed to by s with a constant char b
 * @n: size of memory area to be filled
 * @s: pointer to memory area
 * @b: constant char
 * Return: pointer to s
 */
#include "main.h"
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0 ; i < n ; i++)
	{
		s[i] = b;
	}
return (s);
}

100-atoi.c/     0           0     0     644     521       `
/**
 * _atoi - function that converts a string to an integer
 * @s: string to be converted
 * Return: integer
 */
#include "main.h"
int _atoi(char *s)
{
	int i = 0, len = 0, sign = 1;
	int n = 0;

	while (s[i] != '\0')
	{
		i++;
	}
	len = i;
	for (i = 0 ; i < len ; i++)
	{
		if (s[i] <= 57 && s[i] >= 48)
		{
			n = n * 10 + s[i] - '0';
			if (s[i + 1] < 48 || s[i + 1] > 57)
				break;
		}
		if (s[i] == 45)
		{
			sign = -1;
			if (s[i + 1] < 48 || s[i + 1] > 57)
				sign = 1;
		}
	}
		n = n * sign;
		return (n);
}


1-memcpy.c/     0           0     0     644     355       `
/**
 * _memcpy - function that copies given number of bytes
 * @src: string to be copied from
 * @dest: string to be copied to
 * @n: number of bytes to be copied
 * Return: pointer to dest
 */
#include "main.h"
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0 ; i < n ; i++)
	{
		dest[i] = src[i];
	}
return (dest);
}

2-strchr.c/     0           0     0     644     328       `
/**
 * _strchr - function that locates a character in a string
 * @s: string
 * @c: character to be located
 * Return: pointer to s
 */
#include "main.h"
#include <stddef.h>
char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
		{
			return (s);
		}
	s++;
	}
	if (*s == c)
	{
		return (s);
	}
return (NULL);
}
2-strncpy.c/    0           0     0     644     451       `
/**
 * _strncpy - function that copies n bytes from
 * string to another string.
 * @n: number of bytes to be copied
 * @src: pointer to string to be copied
 * @dest: pointer to string to be copied into
 * Return: pointer to dest
 */
#include "main.h"
char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	while (src[i] != '\0' && i < n)
	{
		dest[i] = src[i];
		i++;
	}
	i = i;
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}


3-puts.c/       0           0     0     644     261       `
/**
 * _puts - function that prints a string, followed by a new line, to stdout
 * @str: string to be printed
 * Return: void
 */
#include "main.h"
void _puts(char *str)
{
	int i;

	for (i = 0 ; str[i] != '\0' ; i++)
	{
	_putchar(str[i]);
	}
	_putchar('\n');
}

3-strspn.c/     0           0     0     644     386       `
/**
 * _strspn -  function that gets the length of a prefix substring
 * @s: string
 * @accept: string to be looked for
 * Return: number of bytes found
 */
#include "main.h"
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != s[i]; j++)
		{
			if (accept[j] == '\0')
				return (i);
		}

	}

	return (i);

}
4-strpbrk.c/    0           0     0     644     58        `
#include "main.h"

char *_strpbrk(char *s, char *accept);
6-abs.c/        0           0     0     644     240       `
/**
 * _abs - function that computes the absolute value of an integer
 * Return: the absolute value of an integer
 * @n: the checked number
 */
	int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	else
	{
		n = (-1) * n;
		return (n);
	}
}
